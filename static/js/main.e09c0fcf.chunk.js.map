{"version":3,"sources":["redux/types.js","components/TopPanel/TopPanel.js","redux/actions/save-words-action.js","components/LeftPanel/LeftPanel.js","redux/actions/add-text-action.js","redux/actions/text-parser-action.js","components/WordsList.js","components/NewPost/NewPost.js","redux/actions/get-to-words-action.js","redux/actions/update-word-action.js","redux/actions/delete-word-action.js","components/Posts/PostItem.js","components/Posts/Posts.js","components/Docs/Docs.js","App.js","components/store.js","redux/reducers/add-text-reducer.js","redux/reducers/text-parser-reducer.js","redux/reducers/get-to-words-reducer.js","reportWebVitals.js","index.js"],"names":["ADD_TEXT","TEXT_PARSER","GET_TO_WORDS","TopPanel","className","to","onClick","this","props","saveWords","Component","connect","dispatch","url","getState","words","textParserReducer","axios","post","then","data","type","payload","save","LeftPanel","addTextAction","text","exactWordsCollection","addTextReducer","doc","nlp","json","terms","WordsList","wordsList","map","word","i","NewPost","name","cols","rows","onChange","e","addText","target","value","state","addTextreducer","gettoWordsCollection","get","updateWord","put","deleteWord","delete","PostItem","submitDesc","setState","clickToEdit","_id","clickDelete","window","location","reload","defaultValue","Posts","index","getToWordsReducer","Docs","App","path","component","exact","reducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e09c0fcf.chunk.js","sourcesContent":["export const ADD_TEXT = \"ADD_TEXT\";\r\nexport const TEXT_PARSER = \"TEXT_PARSER\";\r\nexport const SAVE_WORDS = \"SAVE_WORDS\";\r\nexport const GET_TO_WORDS = \"GET_TO_WORDS\";\r\nexport const UPDATE_WORD = \"UPDATE_WORD\";\r\nexport const DELETE_WORD = \"DELETE_WORD\";\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport saveWords from \"../../redux/actions/save-words-action\";\r\n\r\nexport class TopPanel extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"top-panel\">\r\n          <Link to=\"/\">WordExtractionAdmin</Link>\r\n          <button onClick={this.props.saveWords}>Saves</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getDispatchToProps = (dispatch) => {\r\n  return {\r\n    saveWords: () => dispatch(saveWords(\"http://localhost:4004/words\")),\r\n  };\r\n};\r\n\r\nexport default connect(null, getDispatchToProps)(TopPanel);\r\n","import { SAVE_WORDS } from \"../types\";\r\nimport axios from \"axios\";\r\n\r\nfunction save(words) {\r\n  return {\r\n    type: SAVE_WORDS,\r\n    // payload: localStorage.setItem(\"wordslist\", JSON.stringify(words)),\r\n    payload: words,\r\n  };\r\n}\r\n\r\n// export default function saveWords() {\r\n//   return (dispatch, getState) => {\r\n//     const word = getState().textParserReducer;\r\n//     dispatch(save(word));\r\n//   };\r\n// }\r\n\r\nexport default function saveWords(url) {\r\n  return (dispatch, getState) => {\r\n    const words = getState().textParserReducer;\r\n    axios.post(url, words).then(({ data }) => dispatch(save(data)));\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction LeftPanel() {\r\n  return (\r\n    <div>\r\n      <div className=\"left-panel\">\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/\">NewPost</NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/posts\">Posts</NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/docs\">Docs</NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeftPanel;\r\n","import { ADD_TEXT } from \"../types\";\r\n\r\nconst addTextAction = (text) => {\r\n  return {\r\n    type: ADD_TEXT,\r\n    payload: text,\r\n  };\r\n};\r\n\r\nexport default addTextAction;\r\n","import { TEXT_PARSER } from \"../types\";\r\nimport nlp from \"compromise\";\r\n\r\nconst wordsCollection = (words) => {\r\n  return {\r\n    type: TEXT_PARSER,\r\n    payload: words,\r\n  };\r\n};\r\n\r\nexport default function exactWordsCollection() {\r\n  return (dispatch, getState) => {\r\n    const text = getState().addTextReducer;\r\n    const doc = nlp(text);\r\n    dispatch(wordsCollection(doc.json(0).terms));\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport class WordsList extends Component {\r\n  render() {\r\n    const { wordsList } = this.props;\r\n    return (\r\n      <div>\r\n        {wordsList.map((word, i) => (\r\n          <p key={i}>{word.text}</p>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordsList;\r\n","import TopPanel from \"../TopPanel/TopPanel\";\r\nimport LeftPanel from \"../LeftPanel/LeftPanel\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport addTextAction from \"../../redux/actions/add-text-action\";\r\nimport exactWordsCollection from \"../../redux/actions/text-parser-action\";\r\nimport WordsList from \"../WordsList\";\r\n\r\nexport class NewPost extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TopPanel />\r\n        <div className=\"admin-page\">\r\n          <LeftPanel />\r\n          <div className=\"content\">\r\n            <textarea\r\n              name=\"\"\r\n              cols=\"30\"\r\n              rows=\"10\"\r\n              onChange={(e) => this.props.addText(e.target.value)}\r\n            ></textarea>\r\n            <button\r\n              className=\"prse-btn\"\r\n              onClick={this.props.exactWordsCollection}\r\n            >\r\n              Parse\r\n            </button>\r\n            <WordsList wordsList={this.props.words} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getStateToProps = (state) => {\r\n  return {\r\n    text: state.addTextreducer,\r\n    words: state.textParserReducer,\r\n  };\r\n};\r\n\r\nconst getDispatchToProps = (dispatch) => {\r\n  return {\r\n    addText: (e) => dispatch(addTextAction(e)),\r\n    exactWordsCollection: () => dispatch(exactWordsCollection()),\r\n  };\r\n};\r\n\r\nexport default connect(getStateToProps, getDispatchToProps)(NewPost);\r\n","import { GET_TO_WORDS } from \"../types\";\r\nimport axios from \"axios\";\r\n\r\nconst getToWords = (words) => {\r\n  return {\r\n    type: GET_TO_WORDS,\r\n    payload: words,\r\n  };\r\n};\r\nconst gettoWordsCollection = (url) => (dispatch) =>\r\n  axios.get(url).then(({ data }) => dispatch(getToWords(data)));\r\n\r\nexport default gettoWordsCollection;\r\n","import { UPDATE_WORD } from \"../types\";\r\nimport axios from \"axios\";\r\n\r\nconst update = (word) => {\r\n  return {\r\n    type: UPDATE_WORD,\r\n    payload: word,\r\n  };\r\n};\r\n\r\nfunction updateWord(url, data) {\r\n  return (dispatch) => {\r\n    axios.put(url, data).then(({ data }) => dispatch(update(data)));\r\n  };\r\n}\r\n\r\nexport default updateWord;\r\n","import { DELETE_WORD } from \"../types\";\r\nimport axios from \"axios\";\r\n\r\nconst delItem = (word) => {\r\n  return {\r\n    type: DELETE_WORD,\r\n    payload: word,\r\n  };\r\n};\r\n\r\nfunction deleteWord(url) {\r\n  return (dispatch) => {\r\n    axios.delete(url).then(({ data }) => dispatch(delItem(data)));\r\n  };\r\n}\r\n\r\nexport default deleteWord;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport updateWord from \"../../redux/actions/update-word-action\";\r\nimport deleteWord from \"../../redux/actions/delete-word-action\";\r\n\r\nexport class PostItem extends Component {\r\n  state = {\r\n    post: this.props.word.post,\r\n  };\r\n\r\n  submitDesc = (e) => {\r\n    const value = e.target.value;\r\n    this.setState({ post: value });\r\n  };\r\n\r\n  clickToEdit = () => {\r\n    const data = {\r\n      post: this.state.post,\r\n    };\r\n    this.props.updateWord(\r\n      `http://localhost:4004/words/${this.props.word._id}`,\r\n      data\r\n    );\r\n  };\r\n\r\n  clickDelete = () => {\r\n    this.props.deleteWord(`http://localhost:4004/words/${this.props.word._id}`);\r\n    window.location.reload();\r\n  };\r\n  render() {\r\n    const { word } = this.props;\r\n    const { post } = this.state;\r\n\r\n    return (\r\n      <div className=\"word-cart\">\r\n        <h4>{word.text}</h4>\r\n        <textarea\r\n          cols=\"30\"\r\n          rows=\"10\"\r\n          defaultValue={post}\r\n          onChange={this.submitDesc}\r\n        ></textarea>\r\n        <div>\r\n          <button onClick={this.clickToEdit}>Save</button>\r\n          <button onClick={this.clickDelete}>Delete</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateWord: (url, data) => dispatch(updateWord(url, data)),\r\n    deleteWord: (url) => dispatch(deleteWord(url)),\r\n  };\r\n};\r\n\r\nexport default connect(null, getDispatchToProps)(PostItem);\r\n","import TopPanel from \"../TopPanel/TopPanel\";\r\nimport LeftPanel from \"../LeftPanel/LeftPanel\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport gettoWordsCollection from \"../../redux/actions/get-to-words-action\";\r\nimport PostItem from \"./PostItem\";\r\n\r\nexport class Posts extends Component {\r\n  componentDidMount() {\r\n    const url = \"http://localhost:4004/words\";\r\n    this.props.gettoWordsCollection(url);\r\n  }\r\n\r\n  render() {\r\n    const { words } = this.props;\r\n    return (\r\n      <div>\r\n        <TopPanel />\r\n        <div className=\"admin-page\">\r\n          <LeftPanel />\r\n          <div className=\"content\">\r\n            {words.map((word, index) => (\r\n              <PostItem key={index} word={word} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getStateToprops = (state) => {\r\n  return {\r\n    words: state.getToWordsReducer,\r\n  };\r\n};\r\n\r\nconst getDispatchToProps = (dispatch) => {\r\n  return {\r\n    gettoWordsCollection: (url) => dispatch(gettoWordsCollection(url)),\r\n  };\r\n};\r\n\r\nexport default connect(getStateToprops, getDispatchToProps)(Posts);\r\n","import React from \"react\";\r\nimport TopPanel from \"../TopPanel/TopPanel\";\r\nimport LeftPanel from \"../LeftPanel/LeftPanel\";\r\n\r\nfunction Docs() {\r\n  return (\r\n    <div>\r\n      <TopPanel />\r\n      <div className=\"admin-page\">\r\n        <LeftPanel />\r\n        <div className=\"content\">Documentation</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Docs;\r\n","import { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport NewPost from \"./components/NewPost/NewPost\";\nimport Posts from \"./components/Posts/Posts\";\nimport Docs from \"./components/Docs/Docs\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" component={NewPost} exact />\n      <Route path=\"/posts\" component={Posts} exact />\n      <Route path=\"/docs\" component={Docs} exact />\n    </Router>\n  );\n}\n\nexport default App;\n","import thunk from \"redux-thunk\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { addTextReducer } from \"../redux/reducers/add-text-reducer\";\r\nimport { textParserReducer } from \"../redux/reducers/text-parser-reducer\";\r\nimport { getToWordsReducer } from \"../redux/reducers/get-to-words-reducer\";\r\n\r\nconst reducer = combineReducers({\r\n  addTextReducer,\r\n  textParserReducer,\r\n  getToWordsReducer,\r\n});\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import { ADD_TEXT } from \"../types\";\r\n\r\nexport const addTextReducer = (state = \"\", action) => {\r\n  switch (action.type) {\r\n    case ADD_TEXT:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { TEXT_PARSER } from \"../types\";\r\n\r\nexport const textParserReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case TEXT_PARSER:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { GET_TO_WORDS } from \"../types\";\r\n\r\nexport const getToWordsReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case GET_TO_WORDS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./admin.scss\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./components/store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}